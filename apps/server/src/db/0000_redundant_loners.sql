-- Current sql file was generated after introspecting the database
-- If you want to run this migration please uncomment this code before executing migrations
/*
CREATE TYPE "public"."sheet_difficulty" AS ENUM('basic', 'advanced', 'expert', 'master', 'remaster');--> statement-breakpoint
CREATE TYPE "public"."sheet_type" AS ENUM('std', 'dx', 'utage', 'utage2p');--> statement-breakpoint
CREATE TABLE "profiles" (
	"id" uuid PRIMARY KEY NOT NULL,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"display_name" text NOT NULL
);
--> statement-breakpoint
ALTER TABLE "profiles" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "tags" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "tags_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"created_by" uuid NOT NULL,
	"localized_name" jsonb DEFAULT '{}'::jsonb NOT NULL,
	"localized_description" jsonb DEFAULT '{}'::jsonb NOT NULL,
	"group_id" bigint NOT NULL
);
--> statement-breakpoint
ALTER TABLE "tags" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "song_aliases" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "song_aliases_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"created_by" uuid DEFAULT auth.uid() NOT NULL,
	"song_id" text NOT NULL,
	"name" text NOT NULL,
	CONSTRAINT "chk_name_valid" CHECK ((length(TRIM(BOTH FROM name)) >= 1) AND (name !~ similar_to_escape('%[\x00-\x1F\x7F]%'::text))),
	CONSTRAINT "chk_name_valid_len_up" CHECK (length(TRIM(BOTH FROM name)) < 100)
);
--> statement-breakpoint
ALTER TABLE "song_aliases" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "tag_songs" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "songs_tags_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"tag_id" bigint NOT NULL,
	"song_id" text NOT NULL,
	"sheet_type" "sheet_type" NOT NULL,
	"sheet_difficulty" text NOT NULL,
	"created_by" uuid DEFAULT auth.uid()
);
--> statement-breakpoint
ALTER TABLE "tag_songs" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "comments" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "comments_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"created_by" uuid DEFAULT auth.uid(),
	"song_id" text NOT NULL,
	"sheet_type" "sheet_type" NOT NULL,
	"sheet_difficulty" text NOT NULL,
	"parent_id" bigint,
	"content" text NOT NULL,
	CONSTRAINT "comments_content_check" CHECK ((length(TRIM(BOTH FROM content)) >= 1) AND (length(TRIM(BOTH FROM content)) <= 8192))
);
--> statement-breakpoint
ALTER TABLE "comments" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "tag_groups" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "tag_groups_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"localized_name" jsonb NOT NULL,
	"color" text NOT NULL
);
--> statement-breakpoint
ALTER TABLE "tag_groups" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "profiles" ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "tags" ADD CONSTRAINT "public_tags_group_id_fkey" FOREIGN KEY ("group_id") REFERENCES "public"."tag_groups"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "tags" ADD CONSTRAINT "tags_created_by_fkey" FOREIGN KEY ("created_by") REFERENCES "auth"."users"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "song_aliases" ADD CONSTRAINT "song_aliases_created_by_fkey" FOREIGN KEY ("created_by") REFERENCES "auth"."users"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "tag_songs" ADD CONSTRAINT "public_tag_songs_created_by_fkey" FOREIGN KEY ("created_by") REFERENCES "auth"."users"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "tag_songs" ADD CONSTRAINT "tag_songs_tag_id_fkey" FOREIGN KEY ("tag_id") REFERENCES "public"."tags"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "comments" ADD CONSTRAINT "comments_created_by_fkey" FOREIGN KEY ("created_by") REFERENCES "auth"."users"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "comments" ADD CONSTRAINT "comments_parent_id_fkey" FOREIGN KEY ("parent_id") REFERENCES "public"."comments"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
CREATE UNIQUE INDEX "song_aliases_song_id_name_idx" ON "song_aliases" USING btree ("song_id" text_ops,"name" text_ops);--> statement-breakpoint
CREATE INDEX "tag_songs_song_id_sheet_type_sheet_difficulty_idx" ON "tag_songs" USING btree ("song_id" enum_ops,"sheet_type" text_ops,"sheet_difficulty" enum_ops);--> statement-breakpoint
CREATE UNIQUE INDEX "tag_songs_tag_id_song_id_sheet_type_sheet_difficulty_idx" ON "tag_songs" USING btree ("tag_id" int8_ops,"song_id" int8_ops,"sheet_type" text_ops,"sheet_difficulty" text_ops);--> statement-breakpoint
CREATE INDEX "comments_song_id_sheet_type_sheet_difficulty_idx" ON "comments" USING btree ("song_id" text_ops,"sheet_type" text_ops,"sheet_difficulty" text_ops);--> statement-breakpoint
CREATE POLICY "Enable insert for users based on user_id" ON "profiles" AS PERMISSIVE FOR INSERT TO public WITH CHECK ((( SELECT auth.uid() AS uid) = id));--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "profiles" AS PERMISSIVE FOR SELECT TO public;--> statement-breakpoint
CREATE POLICY "Enable update for users based on user_id" ON "profiles" AS PERMISSIVE FOR UPDATE TO public;--> statement-breakpoint
CREATE POLICY "Enable insert for authenticated users only" ON "tags" AS PERMISSIVE FOR INSERT TO "authenticated" WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "tags" AS PERMISSIVE FOR SELECT TO public;--> statement-breakpoint
CREATE POLICY "Enable update for authenticated users only" ON "tags" AS PERMISSIVE FOR UPDATE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Enable insert for users based on user_id" ON "song_aliases" AS PERMISSIVE FOR INSERT TO public WITH CHECK ((( SELECT auth.uid() AS uid) = created_by));--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "song_aliases" AS PERMISSIVE FOR SELECT TO public;--> statement-breakpoint
CREATE POLICY "Enable insert for users based on user_id" ON "tag_songs" AS PERMISSIVE FOR INSERT TO public WITH CHECK ((( SELECT auth.uid() AS uid) = created_by));--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "tag_songs" AS PERMISSIVE FOR SELECT TO public;--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "comments" AS PERMISSIVE FOR SELECT TO public USING (true);--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "tag_groups" AS PERMISSIVE FOR SELECT TO public USING (true);
*/